<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>ragone.io</title>
<description>ragone.io</description>
<link>https://ragone.io/</link>
<lastBuildDate>Wed, 03 Jul 2019 21:54:46 +0800</lastBuildDate>
<item>
  <title>org-mu4e.el</title>
  <description><![CDATA[
<div class="taglist">:<a href="tag-emacs.html">emacs</a>:<a href="tag-snippets.html">snippets</a>:</div></div><div class="post-date"><2019-06-14 Fri></div><p>
Tag elements if there are any unread emails in your <code>mu4e</code> inbox.
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span class="org-keyword">defconst</span> <span class="org-variable-name">ragone-unread-tag</span> <span class="org-string">"unread"</span>
  <span class="org-doc">"Tag to add to Org elements which have unread emails."</span><span class="org-parinfer-pretty-parensXdim-paren">)</span>

(<span class="org-keyword">defun</span> <span class="org-function-name">ragone-tag-unread-elements</span> (<span class="org-parinfer-pretty-parensXdim-paren">)</span>
  <span class="org-doc">"Update Org elements with `</span><span class="org-doc"><span class="org-constant">ragone-unread-tag</span></span><span class="org-doc">' if there are unread emails."</span>
  (<span class="org-keyword">unless</span> (mu4e~proc-running-p<span class="org-parinfer-pretty-parensXdim-paren">)</span>
    (mu4e~proc-start<span class="org-parinfer-pretty-parensXdim-paren">))</span>
  (<span class="org-function-name">org-map-entries</span>
   (<span class="org-keyword">lambda</span> (<span class="org-parinfer-pretty-parensXdim-paren">)</span>
     (<span class="org-keyword">let*</span> ((<span class="org-function-name">search</span> (<span class="org-constant">concat</span> <span class="org-string">"flag:unread "</span> (<span class="org-constant">nth</span> <span class="org-highlight-numbers-number">4</span> (<span class="org-function-name">org-heading-components</span><span class="org-parinfer-pretty-parensXdim-paren">))))</span>
            (code (<span class="org-keyword">with-temp-buffer</span>
                    (<span class="org-constant">call-process</span> <span class="org-string">"mu"</span> nil (<span class="org-constant">current-buffer</span>) nil <span class="org-string">"find"</span> search<span class="org-parinfer-pretty-parensXdim-paren">))))</span>
       (<span class="org-function-name">org-toggle-tag</span> ragone-unread-tag (<span class="org-keyword">if</span> (<span class="org-constant">=</span> <span class="org-highlight-numbers-number">0</span> code) <span class="org-highlight-quoted-quote">'</span><span class="org-highlight-quoted-symbol">on</span> <span class="org-highlight-quoted-quote">'</span><span class="org-highlight-quoted-symbol">off</span><span class="org-parinfer-pretty-parensXdim-paren">))))</span>
   t
   <span class="org-highlight-quoted-quote">'</span><span class="org-highlight-quoted-symbol">agenda</span><span class="org-parinfer-pretty-parensXdim-paren">))</span>

<span class="org-comment-delimiter">;; </span><span class="org-comment">Add a hook to run before agenda displays.</span>
(<span class="org-function-name">add-hook</span> <span class="org-highlight-quoted-quote">'</span><span class="org-variable-name">org-agenda-mode-hook</span> <span class="org-highlight-quoted-quote">#'</span><span class="org-highlight-quoted-symbol">ragone-tag-unread-elements</span><span class="org-parinfer-pretty-parensXdim-paren">)</span>
</pre>
</div>
]]></description>
  <category>emacs</category>
  <category>snippets</category>
  <link>https://ragone.io/org-mu4e.html</link>
  <pubDate>Fri, 14 Jun 2019 08:00:00 +0800</pubDate>
</item>
<item>
  <title>quotes.el</title>
  <description><![CDATA[
<div class="taglist">:<a href="tag-emacs.html">emacs</a>:<a href="tag-snippets.html">snippets</a>:</div></div><div class="post-date"><2019-05-26 Sun></div><p>
My initial buffer displays a random quote from a list of programming/CS quotes.
The complete list of quotes can be found <a href="https://ragone.io/static/quotes.txt">here</a>.
</p>


<figure>
<img src="img/quote.png" alt="quote.png">

</figure>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span class="org-keyword">defvar</span> <span class="org-variable-name">ragone-quotes-file</span> <span class="org-string">"~/.doom.d/quotes.txt"</span>
  <span class="org-doc">"File to lookup quotes."</span><span class="org-parinfer-pretty-parensXdim-paren">)</span>

(<span class="org-keyword">defvar</span> <span class="org-variable-name">ragone-quotes-file-seperator-regex</span> <span class="org-string">"\n%\n"</span>
  <span class="org-doc">"Delimiter for seperating the line in `</span><span class="org-doc"><span class="org-constant">ragone-quotes-file</span></span><span class="org-doc">'."</span><span class="org-parinfer-pretty-parensXdim-paren">)</span>

(<span class="org-keyword">defvar</span> <span class="org-variable-name">ragone-quotes-author-regex</span> <span class="org-string">"^--"</span>
  <span class="org-doc">"Regex for getting the author of the quote.</span>

<span class="org-doc">Anything after this will be changed to face `</span><span class="org-doc"><span class="org-constant">font-lock-comment-face</span></span><span class="org-doc">'."</span><span class="org-parinfer-pretty-parensXdim-paren">)</span>

(<span class="org-keyword">defun</span> <span class="org-function-name">ragone-get-quote</span> (<span class="org-type">&amp;optional</span> nth<span class="org-parinfer-pretty-parensXdim-paren">)</span>
  <span class="org-doc">"Get a random quote from `</span><span class="org-doc"><span class="org-constant">ragone-quotes-file</span></span><span class="org-doc">'.</span>

<span class="org-doc">Optionally get the NTH quote."</span>
  (<span class="org-keyword">let*</span> ((quotes (<span class="org-function-name">split-string</span>
                  (<span class="org-keyword">with-temp-buffer</span>
                    (<span class="org-constant">insert-file-contents</span> <span class="org-variable-name">ragone-quotes-file</span><span class="org-parinfer-pretty-parensXdim-paren">)</span>
                    (<span class="org-constant">buffer-substring-no-properties</span>
                     (<span class="org-constant">point-min</span><span class="org-parinfer-pretty-parensXdim-paren">)</span>
                     (<span class="org-constant">point-max</span><span class="org-parinfer-pretty-parensXdim-paren">)))</span>
                  <span class="org-variable-name">ragone-quotes-file-seperator-regex</span> t<span class="org-parinfer-pretty-parensXdim-paren">))</span>
         (selected-quote (<span class="org-constant">nth</span> (<span class="org-keyword">or</span> nth
                                  (<span class="org-constant">random</span> (<span class="org-constant">length</span> quotes<span class="org-parinfer-pretty-parensXdim-paren">)))</span>
                              quotes<span class="org-parinfer-pretty-parensXdim-paren">)))</span>
    (<span class="org-constant">put-text-property</span>
     (<span class="org-constant">string-match</span> <span class="org-variable-name">ragone-quotes-author-regex</span> selected-quote<span class="org-parinfer-pretty-parensXdim-paren">)</span>
     (<span class="org-constant">length</span> selected-quote<span class="org-parinfer-pretty-parensXdim-paren">)</span>
     <span class="org-highlight-quoted-quote">'</span><span class="org-highlight-quoted-symbol">face</span>
     <span class="org-highlight-quoted-quote">'</span><span class="org-variable-name">font-lock-comment-face</span>
     selected-quote<span class="org-parinfer-pretty-parensXdim-paren">)</span>
    selected-quote<span class="org-parinfer-pretty-parensXdim-paren">))</span>

<span class="org-comment-delimiter">;; </span><span class="org-comment">Update your scratch buffer</span>
(<span class="org-keyword">setq</span> <span class="org-variable-name">initial-scratch-message</span> (ragone-get-quote<span class="org-parinfer-pretty-parensXdim-paren">))</span>
</pre>
</div>
]]></description>
  <category>emacs</category>
  <category>snippets</category>
  <link>https://ragone.io/quote.html</link>
  <pubDate>Sun, 26 May 2019 08:00:00 +0800</pubDate>
</item>
<item>
  <title>magit-diff-flycheck.el</title>
  <description><![CDATA[
<div class="taglist">:<a href="tag-projects.html">projects</a>:<a href="tag-emacs.html">emacs</a>:</div></div><div class="post-date"><2019-05-24 Fri></div>
<figure>
<img src="img/magit-diff-flycheck.gif" alt="magit-diff-flycheck.gif">

</figure>

<p>
For the past couple of months I have been working on tools which allow you
to run linters on the added/modified lines of a Git diff. One of these tools are
<code>magit-diff-flycheck</code>.
</p>

<p>
This is primarily meant to be used on legacy projects where you do not want to
see errors for the whole file but only for the added/modified lines.
</p>

<p>
The package is published on <a href="https://melpa.org/#/magit-diff-flycheck">MELPA</a> package manager and on <a href="https://github.com/ragone/magit-diff-flycheck">GitHub</a> under license GNU GPL-3.0.
</p>

<div id="outline-container-org5358a7a" class="outline-2">
<h2 id="org5358a7a">Examples</h2>
<div class="outline-text-2" id="text-org5358a7a">
<p>
Run <code>M-x magit-diff-flycheck</code> in a magit-diff buffer to display a filtered list
of <a href="https://github.com/flycheck/flycheck">Flycheck</a> errors for the added/modified lines only.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-comment-delimiter">;; </span><span class="org-comment">Run Flycheck on added/modified lines by default</span>
M-x magit-diff-flycheck
</pre>
</div>

<p>
Use can also run the command with a prefix which will prompt you for the scope
of the errors.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-comment-delimiter">;; </span><span class="org-comment">Choose scope of error filtering to symbol files or lines</span>
C-u M-x magit-diff-flycheck
</pre>
</div>
</div>
</div>
]]></description>
  <category>projects</category>
  <category>emacs</category>
  <link>https://ragone.io/magit-diff-flycheck.html</link>
  <pubDate>Fri, 24 May 2019 08:00:00 +0800</pubDate>
</item>
<item>
  <title>htmlize.el</title>
  <description><![CDATA[
<div class="taglist">:<a href="tag-emacs.html">emacs</a>:<a href="tag-snippets.html">snippets</a>:</div></div><div class="post-date"><2019-05-23 Thu></div><p>
Quickly copy an image of a htmlized buffer or region to the clipboard.
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span class="org-keyword">defun</span> <span class="org-function-name">ragone-htmlize</span> (<span class="org-parinfer-pretty-parensXdim-paren">)</span>
  <span class="org-doc">"Convert the htmlized region to an image and copy to clipboard."</span>
  (<span class="org-keyword">interactive</span><span class="org-parinfer-pretty-parensXdim-paren">)</span>
  (<span class="org-keyword">let</span> ((<span class="org-variable-name">htmlize-pre-style</span> t<span class="org-parinfer-pretty-parensXdim-paren">)</span>
        (region-background (<span class="org-function-name">face-attribute</span> <span class="org-highlight-quoted-quote">'</span><span class="org-highlight-quoted-symbol">region</span> <span class="org-builtin">:background</span><span class="org-parinfer-pretty-parensXdim-paren">))</span>
        (start (<span class="org-keyword">if</span> (<span class="org-function-name">region-active-p</span><span class="org-parinfer-pretty-parensXdim-paren">)</span>
                   (<span class="org-constant">region-beginning</span>) (<span class="org-constant">point-min</span><span class="org-parinfer-pretty-parensXdim-paren">)))</span>
        (end (<span class="org-keyword">if</span> (<span class="org-function-name">region-active-p</span><span class="org-parinfer-pretty-parensXdim-paren">)</span>
                 (<span class="org-constant">region-end</span>) (<span class="org-constant">point-max</span><span class="org-parinfer-pretty-parensXdim-paren">))))</span>
    (<span class="org-function-name">set-face-background</span> <span class="org-highlight-quoted-quote">'</span><span class="org-highlight-quoted-symbol">region</span> <span class="org-string">"unspecified"</span><span class="org-parinfer-pretty-parensXdim-paren">)</span>
    (<span class="org-keyword">unwind-protect</span>
      (<span class="org-function-name">ragone-htmlize-to-clipboard</span>
       (<span class="org-function-name">htmlize-region-for-paste</span> start end<span class="org-parinfer-pretty-parensXdim-paren">))</span>
      (<span class="org-function-name">set-face-background</span> <span class="org-highlight-quoted-quote">'</span><span class="org-highlight-quoted-symbol">region</span> region-background<span class="org-parinfer-pretty-parensXdim-paren">))))</span>

(<span class="org-keyword">defun</span> <span class="org-function-name">ragone-htmlize-to-clipboard</span> (html<span class="org-parinfer-pretty-parensXdim-paren">)</span>
  <span class="org-doc">"Copy HTML to clipboard."</span>
  (<span class="org-keyword">with-temp-buffer</span>
    (<span class="org-constant">insert</span> html<span class="org-parinfer-pretty-parensXdim-paren">)</span>
    (<span class="org-function-name">call-shell-region</span>
     (<span class="org-constant">point-min</span>) (<span class="org-constant">point-max</span><span class="org-parinfer-pretty-parensXdim-paren">)</span>
     <span class="org-string">"wkhtmltoimage -f png - - | xclip -i -selection clipboard -t image/png"</span><span class="org-parinfer-pretty-parensXdim-paren">)))</span>
</pre>
</div>
]]></description>
  <category>emacs</category>
  <category>snippets</category>
  <link>https://ragone.io/htmlize.html</link>
  <pubDate>Thu, 23 May 2019 08:00:00 +0800</pubDate>
</item>
<item>
  <title>deft-or-close.el</title>
  <description><![CDATA[
<div class="taglist">:<a href="tag-emacs.html">emacs</a>:<a href="tag-snippets.html">snippets</a>:</div></div><div class="post-date"><2019-05-11 Sat></div><p>
Easily toggle between your notes and your working buffer.
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span class="org-keyword">defun</span> <span class="org-function-name">ragone-kill-deft-buffers</span> (<span class="org-parinfer-pretty-parensXdim-paren">)</span>
  <span class="org-doc">"Toggle Deft mode."</span>
  (<span class="org-keyword">interactive</span><span class="org-parinfer-pretty-parensXdim-paren">)</span>
  (<span class="org-keyword">save-excursion</span>
    (<span class="org-keyword">let</span> ((<span class="org-function-name">count</span> <span class="org-highlight-numbers-number">0</span><span class="org-parinfer-pretty-parensXdim-paren">))</span>
      (<span class="org-keyword">dolist</span> (buffer (<span class="org-constant">buffer-list</span><span class="org-parinfer-pretty-parensXdim-paren">))</span>
        (<span class="org-constant">set-buffer</span> buffer<span class="org-parinfer-pretty-parensXdim-paren">)</span>
        (<span class="org-keyword">when</span> (<span class="org-constant">not</span> (<span class="org-constant">eq</span> nil deft-note-mode<span class="org-parinfer-pretty-parensXdim-paren">))</span>
          (<span class="org-keyword">setq</span> count (<span class="org-constant">1+</span> count<span class="org-parinfer-pretty-parensXdim-paren">))</span>
          (<span class="org-constant">kill-buffer</span> buffer<span class="org-parinfer-pretty-parensXdim-paren">))))))</span>

(<span class="org-keyword">defun</span> <span class="org-function-name">ragone-deft-or-close</span> (<span class="org-parinfer-pretty-parensXdim-paren">)</span>
  <span class="org-doc">"Kill all Deft buffers."</span>
  (<span class="org-keyword">interactive</span><span class="org-parinfer-pretty-parensXdim-paren">)</span>
  (<span class="org-keyword">if</span> (<span class="org-keyword">or</span> (<span class="org-constant">eq</span> <span class="org-variable-name">major-mode</span> <span class="org-highlight-quoted-quote">'</span><span class="org-highlight-quoted-symbol">deft-mode</span><span class="org-parinfer-pretty-parensXdim-paren">)</span>
          (<span class="org-constant">not</span> (<span class="org-constant">eq</span> nil deft-note-mode<span class="org-parinfer-pretty-parensXdim-paren">)))</span>
      (<span class="org-keyword">progn</span> (<span class="org-function-name">ragone-kill-deft-buffers</span>) (<span class="org-constant">kill-buffer</span> <span class="org-string">"*Deft*"</span><span class="org-parinfer-pretty-parensXdim-paren">))</span>
    (<span class="org-function-name">deft</span><span class="org-parinfer-pretty-parensXdim-paren">)))</span>
</pre>
</div>
]]></description>
  <category>emacs</category>
  <category>snippets</category>
  <link>https://ragone.io/deft-or-close.html</link>
  <pubDate>Sat, 11 May 2019 08:00:00 +0800</pubDate>
</item>
<item>
  <title>2019</title>
  <description><![CDATA[
<div class="taglist">:<a href="tag-projects.html">projects</a>:</div></div><div class="post-date"><2019-01-01 Tue></div>
<div id="outline-container-org8aff021" class="outline-2">
<h2 id="org8aff021">magit-diff-flycheck&#xa0;&#xa0;&#xa0;<span class="tag"><span class="EmacsLisp">EmacsLisp</span>&#xa0;<span class="2019">2019</span></span></h2>
<div class="outline-text-2" id="text-org8aff021">
<p>
Interactive tool for lint output in Git diffs.
</p>
<ul class="org-ul">
<li><a href="https://github.com/ragone/magit-diff-flycheck">GitHub</a></li>
<li><a href="https://melpa.org/#/magit-diff-flycheck">Melpa.org</a></li>
</ul>
</div>
</div>
<div id="outline-container-org4634a92" class="outline-2">
<h2 id="org4634a92">lint-emit&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Rust">Rust</span>&#xa0;<span class="2019">2019</span></span></h2>
<div class="outline-text-2" id="text-org4634a92">
<p>
Command-line utility to run concurrent linters on a subset of lines.
</p>
<ul class="org-ul">
<li><a href="https://github.com/ragone/lint-emit">GitHub</a></li>
<li><a href="https://crates.io/crates/lint-emit/crates.io">Crates.io</a></li>
</ul>
</div>
</div>
]]></description>
  <category>projects</category>
  <link>https://ragone.io/2019.html</link>
  <pubDate>Tue, 01 Jan 2019 08:00:00 +0800</pubDate>
</item>
<item>
  <title>2018</title>
  <description><![CDATA[
<div class="taglist">:<a href="tag-projects.html">projects</a>:</div></div><div class="post-date"><2018-01-01 Mon></div>
<div id="outline-container-org51a648d" class="outline-2">
<h2 id="org51a648d">QuietMind&#xa0;&#xa0;&#xa0;<span class="tag"><span class="ReactNative">ReactNative</span>&#xa0;<span class="Java">Java</span></span></h2>
<div class="outline-text-2" id="text-org51a648d">
<p>
A silent meditation tool for iOS and Android.
</p>
<ul class="org-ul">
<li><a href="https://github.com/ragone/quietmind">GitHub</a></li>
<li><a href="https://itunes.apple.com/dk/app/quietmind/id1375294277">Apple App Store</a></li>
<li><a href="https://play.google.com/store/apps/details?id=ragone.io.quietmind">Google Play Store</a></li>
</ul>
</div>
</div>
]]></description>
  <category>projects</category>
  <link>https://ragone.io/2018.html</link>
  <pubDate>Mon, 01 Jan 2018 08:00:00 +0800</pubDate>
</item>
<item>
  <title>2016</title>
  <description><![CDATA[
<div class="taglist">:<a href="tag-projects.html">projects</a>:</div></div><div class="post-date"><2016-01-01 Fri></div>
<div id="outline-container-org5c80b38" class="outline-2">
<h2 id="org5c80b38">Emacs Config&#xa0;&#xa0;&#xa0;<span class="tag"><span class="EmacsLisp">EmacsLisp</span></span></h2>
<div class="outline-text-2" id="text-org5c80b38">
<p>
Personal configuration based on Doom Emacs.
</p>
<ul class="org-ul">
<li><a href="https://github.com/ragone/.doom.d">GitHub</a></li>
</ul>
</div>
</div>
]]></description>
  <category>projects</category>
  <link>https://ragone.io/2016.html</link>
  <pubDate>Fri, 01 Jan 2016 08:00:00 +0800</pubDate>
</item>
</channel>
</rss>
